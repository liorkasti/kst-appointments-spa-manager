{"ast":null,"code":"var _s = $RefreshSig$();\nimport jsonpatch from 'fast-json-patch';\nimport { useMutation } from 'react-query';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { useCustomToast } from '../../app/hooks/useCustomToast';\nimport { useUser } from './useUser';\n\n// for when we need a server function\nasync function patchUserOnServer(newData, originalData) {\n  if (!newData || !originalData) return null;\n  // create a patch for the difference between newData and originalData\n  const patch = jsonpatch.compare(originalData, newData);\n\n  // send patched data to the server\n  const {\n    data\n  } = await axiosInstance.patch(`/user/${originalData.id}`, {\n    patch\n  }, {\n    headers: getJWTHeader(originalData)\n  });\n  return data.user;\n}\n\n// TODO: update type to UseMutateFunction type\nexport function usePatchUser() {\n  _s();\n  const {\n    user,\n    updateUser\n  } = useUser(); // user init originalData\n  const toast = useCustomToast();\n  // TODO: replace with mutate function\n  const {\n    mutate: patchUser\n  } = useMutation(newUserData => patchUserOnServer(newUserData, user), {\n    // onMutate returns context taht is passed to onError\n    // onMutate: async (newData: User | null) => {\n    //   // cencel any outgoing queries for user data, so old data does not overwrite optimistic update\n    // }\n    onSuccess: userData => {\n      if (user) {\n        updateUser(userData);\n        toast({\n          title: 'User updated',\n          status: 'success'\n        });\n      }\n    }\n  });\n  return patchUser;\n}\n_s(usePatchUser, \"JrxbyD3aQpnwhUE51FII2zhy7og=\", false, function () {\n  return [useUser, useCustomToast, useMutation];\n});","map":{"version":3,"names":["jsonpatch","useMutation","axiosInstance","getJWTHeader","useCustomToast","useUser","patchUserOnServer","newData","originalData","patch","compare","data","id","headers","user","usePatchUser","_s","updateUser","toast","mutate","patchUser","newUserData","onSuccess","userData","title","status"],"sources":["/Users/liorkastenbaum/Repos/kst-appointments-manager-app/client/src/components/user/hooks/usePatchUser.ts"],"sourcesContent":["import jsonpatch from 'fast-json-patch';\nimport { useMutation } from 'react-query';\n\nimport type { User } from '../../../../../shared/types';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { useCustomToast } from '../../app/hooks/useCustomToast';\nimport { useUser } from './useUser';\n\n// for when we need a server function\nasync function patchUserOnServer(\n  newData: User | null,\n  originalData: User | null,\n): Promise<User | null> {\n  if (!newData || !originalData) return null;\n  // create a patch for the difference between newData and originalData\n  const patch = jsonpatch.compare(originalData, newData);\n\n  // send patched data to the server\n  const { data } = await axiosInstance.patch(\n    `/user/${originalData.id}`,\n    { patch },\n    {\n      headers: getJWTHeader(originalData),\n    },\n  );\n  return data.user;\n}\n\n// TODO: update type to UseMutateFunction type\nexport function usePatchUser(): (newData: User | null) => void {\n  const { user, updateUser } = useUser(); // user init originalData\n  const toast = useCustomToast();\n  // TODO: replace with mutate function\n  const { mutate: patchUser } = useMutation(\n    (newUserData: User) => patchUserOnServer(newUserData, user),\n    {\n      // onMutate returns context taht is passed to onError\n      // onMutate: async (newData: User | null) => {\n      //   // cencel any outgoing queries for user data, so old data does not overwrite optimistic update\n      // }\n      onSuccess: (userData: User | null) => {\n        if (user) {\n          updateUser(userData);\n          toast({\n            title: 'User updated',\n            status: 'success',\n          });\n        }\n      },\n    },\n  );\n\n  return patchUser;\n}\n"],"mappings":";AAAA,OAAOA,SAAS,MAAM,iBAAiB;AACvC,SAASC,WAAW,QAAQ,aAAa;AAGzC,SAASC,aAAa,EAAEC,YAAY,QAAQ,wBAAwB;AACpE,SAASC,cAAc,QAAQ,gCAAgC;AAC/D,SAASC,OAAO,QAAQ,WAAW;;AAEnC;AACA,eAAeC,iBAAiBA,CAC9BC,OAAoB,EACpBC,YAAyB,EACH;EACtB,IAAI,CAACD,OAAO,IAAI,CAACC,YAAY,EAAE,OAAO,IAAI;EAC1C;EACA,MAAMC,KAAK,GAAGT,SAAS,CAACU,OAAO,CAACF,YAAY,EAAED,OAAO,CAAC;;EAEtD;EACA,MAAM;IAAEI;EAAK,CAAC,GAAG,MAAMT,aAAa,CAACO,KAAK,CACvC,SAAQD,YAAY,CAACI,EAAG,EAAC,EAC1B;IAAEH;EAAM,CAAC,EACT;IACEI,OAAO,EAAEV,YAAY,CAACK,YAAY;EACpC,CACF,CAAC;EACD,OAAOG,IAAI,CAACG,IAAI;AAClB;;AAEA;AACA,OAAO,SAASC,YAAYA,CAAA,EAAmC;EAAAC,EAAA;EAC7D,MAAM;IAAEF,IAAI;IAAEG;EAAW,CAAC,GAAGZ,OAAO,CAAC,CAAC,CAAC,CAAC;EACxC,MAAMa,KAAK,GAAGd,cAAc,CAAC,CAAC;EAC9B;EACA,MAAM;IAAEe,MAAM,EAAEC;EAAU,CAAC,GAAGnB,WAAW,CACtCoB,WAAiB,IAAKf,iBAAiB,CAACe,WAAW,EAAEP,IAAI,CAAC,EAC3D;IACE;IACA;IACA;IACA;IACAQ,SAAS,EAAGC,QAAqB,IAAK;MACpC,IAAIT,IAAI,EAAE;QACRG,UAAU,CAACM,QAAQ,CAAC;QACpBL,KAAK,CAAC;UACJM,KAAK,EAAE,cAAc;UACrBC,MAAM,EAAE;QACV,CAAC,CAAC;MACJ;IACF;EACF,CACF,CAAC;EAED,OAAOL,SAAS;AAClB;AAACJ,EAAA,CAxBeD,YAAY;EAAA,QACGV,OAAO,EACtBD,cAAc,EAEEH,WAAW;AAAA"},"metadata":{},"sourceType":"module"}