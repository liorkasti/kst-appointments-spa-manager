{"ast":null,"code":"var _s = $RefreshSig$();\nimport jsonpatch from 'fast-json-patch';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { useUser } from './useUser';\nimport { useMutation } from 'react-query';\n\n// for when we need a server function\nasync function patchUserOnServer(newData, originalData) {\n  if (!newData || !originalData) return null;\n  // create a patch for the difference between newData and originalData\n  const patch = jsonpatch.compare(originalData, newData);\n\n  // send patched data to the server\n  const {\n    data\n  } = await axiosInstance.patch(`/user/${originalData.id}`, {\n    patch\n  }, {\n    headers: getJWTHeader(originalData)\n  });\n  return data.user;\n}\n\n// TODO: update type to UseMutateFunction type\nexport function usePatchUser() {\n  _s();\n  const {\n    user,\n    updateUser\n  } = useUser();\n\n  // TODO: replace with mutate function\n  const {\n    mutate: patchUser\n  } = useMutation(newUserData => patchUserOnServer(newUserData, user));\n  return patchUser;\n}\n_s(usePatchUser, \"x+pp1+VMbMwfmHTR2c1THoHvucg=\", false, function () {\n  return [useUser, useMutation];\n});","map":{"version":3,"names":["jsonpatch","axiosInstance","getJWTHeader","useUser","useMutation","patchUserOnServer","newData","originalData","patch","compare","data","id","headers","user","usePatchUser","_s","updateUser","mutate","patchUser","newUserData"],"sources":["/Users/liorkastenbaum/Repos/kst-appointments-manager-app/client/src/components/user/hooks/usePatchUser.ts"],"sourcesContent":["import jsonpatch from 'fast-json-patch';\n\nimport type { User } from '../../../../../shared/types';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { useUser } from './useUser';\nimport { useMutation } from 'react-query';\n\n// for when we need a server function\nasync function patchUserOnServer(\n  newData: User | null,\n  originalData: User | null,\n): Promise<User | null> {\n  if (!newData || !originalData) return null;\n  // create a patch for the difference between newData and originalData\n  const patch = jsonpatch.compare(originalData, newData);\n\n  // send patched data to the server\n  const { data } = await axiosInstance.patch(\n    `/user/${originalData.id}`,\n    { patch },\n    {\n      headers: getJWTHeader(originalData),\n    },\n  );\n  return data.user;\n}\n\n// TODO: update type to UseMutateFunction type\nexport function usePatchUser(): (newData: User | null) => void {\n  const { user, updateUser } = useUser();\n\n  // TODO: replace with mutate function\n  const { mutate: patchUser } = useMutation((newUserData: User) =>\n    patchUserOnServer(newUserData, user),\n  );\n\n  return patchUser;\n}\n"],"mappings":";AAAA,OAAOA,SAAS,MAAM,iBAAiB;AAGvC,SAASC,aAAa,EAAEC,YAAY,QAAQ,wBAAwB;AACpE,SAASC,OAAO,QAAQ,WAAW;AACnC,SAASC,WAAW,QAAQ,aAAa;;AAEzC;AACA,eAAeC,iBAAiBA,CAC9BC,OAAoB,EACpBC,YAAyB,EACH;EACtB,IAAI,CAACD,OAAO,IAAI,CAACC,YAAY,EAAE,OAAO,IAAI;EAC1C;EACA,MAAMC,KAAK,GAAGR,SAAS,CAACS,OAAO,CAACF,YAAY,EAAED,OAAO,CAAC;;EAEtD;EACA,MAAM;IAAEI;EAAK,CAAC,GAAG,MAAMT,aAAa,CAACO,KAAK,CACvC,SAAQD,YAAY,CAACI,EAAG,EAAC,EAC1B;IAAEH;EAAM,CAAC,EACT;IACEI,OAAO,EAAEV,YAAY,CAACK,YAAY;EACpC,CACF,CAAC;EACD,OAAOG,IAAI,CAACG,IAAI;AAClB;;AAEA;AACA,OAAO,SAASC,YAAYA,CAAA,EAAmC;EAAAC,EAAA;EAC7D,MAAM;IAAEF,IAAI;IAAEG;EAAW,CAAC,GAAGb,OAAO,CAAC,CAAC;;EAEtC;EACA,MAAM;IAAEc,MAAM,EAAEC;EAAU,CAAC,GAAGd,WAAW,CAAEe,WAAiB,IAC1Dd,iBAAiB,CAACc,WAAW,EAAEN,IAAI,CACrC,CAAC;EAED,OAAOK,SAAS;AAClB;AAACH,EAAA,CATeD,YAAY;EAAA,QACGX,OAAO,EAGNC,WAAW;AAAA"},"metadata":{},"sourceType":"module"}